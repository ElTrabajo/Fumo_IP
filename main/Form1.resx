<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>